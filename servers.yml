# CloudFormation Script for EC2 Servers
# Project: UdacityProject2
# Stack Name: UdacityStackProject2-Servers
# Created by: Kaili Gu

# Web application script
Description: 
  Kaili Gu 


Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names.
    Type: String

  EC2InstanceProfileRole:
    Description: IAM Role profile to be used when launching an EC2 Instance.
    Type: String

  
Resources:
# EC2 Launch Configuration
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-00a54827eb7ffcd3c # Ubuntu Server 18.04 LTS (HVM), SSD Volume Type
      IamInstanceProfile: !Ref EC2InstanceProfileRole
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      InstanceType: t2.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  
  # AutoScaling Group        
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # List Private Subnet IDs
      VPCZoneIdentifier: 
        - Fn::ImportValue: !Sub ${EnvironmentName}-Private-Subnet-IDs
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} EC2 Instance
          PropagateAtLaunch: true

  # Load Balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${EnvironmentName}-Public-Subnet-1-ID
      - Fn::ImportValue: !Sub ${EnvironmentName}-Public-Subnet-2-ID
      SecurityGroups:
      - Ref: LBSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Load Balancer
    
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: '80'
      Protocol: HTTP
  
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

  WebAppTargetGroup:
  ## Checks for an HTTP response
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: / # Filepath of what you want to check.
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

          
  # ===========================
  # Security Groups      
  # ===========================

  # Load Balancer Security Group
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP in Load Balancer
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: TCP
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: TCP
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0                                                                                        

  # Security group for EC2 Instance.      
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: EC2 Security Group
      GroupName: EC2-SecurityGroup
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      # Outbound Rules
      SecurityGroupEgress: 
      - IpProtocol: TCP
        FromPort: 0
        ToPort: 65535 
        CidrIp: 0.0.0.0/0
      # Inbound Rules  
      SecurityGroupIngress: 
      - Description: Inbound rule to allow the Load Balancer.
        IpProtocol: TCP
        SourceSecurityGroupId: !Ref LBSecGroup
        FromPort: 80
        ToPort: 80    
      Tags: 
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
        - Key: EntityType
          Value: SecurityGroup

Outputs:

  LoadBalancerDNS:
    Description: The URL of the Udagram Site
    Value: 
      !Sub
        - 'http://${LoadBalancerDNS}'
        - {LoadBalancerDNS: !GetAtt 'WebAppLB.DNSName'}
    Export:
      Name: !Sub "${EnvironmentName}-SiteURL"