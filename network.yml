# CloudFormation Script for network architecture
# Project: UdacityProject2
# Stack Name: UdacityStackProject2-Network
# Created by: Kaili Gu


Description: 
    Kaili Gu >
    This template deploys a VPC, with a pair of public and private subnets spread 
    across two Availabilty Zones. It deploys an Internet Gateway, with a default 
    route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), 
    and default routes for them in the private subnets.
  
Parameters:
    EnvironmentName:
      Description: An environment name that will be prefixed to resource names.
      Type: String
    
    VpcCIDR: 
      Description: Please enter the IP range (CIDR notation) for this VPC
      Type: String
  
    PublicSubnet1CIDR:
      Description: IP range (CIDR notation) for the public subnet in the first availability zone.
      Type: String
  
    PublicSubnet2CIDR:
      Description: IP range (CIDR notation) for the public subnet in the first availability zone.
      Type: String
  
    PrivateSubnet1CIDR:
      Description: IP range (CIDR notation) for the private subnet in the first Availability Zone
      Type: String
      
    PrivateSubnet2CIDR:
      Description: IP range (CIDR notation) for the private subnet in the second Availability Zone
      Type: String
      
    
  
Resources:

  # ========================
  # VPC and Internet Gateway
  # ========================
  
    # Virtual Private Cloud
    VPC: 
        Type: AWS::EC2::VPC 
        Properties:
            CidrBlock: !Ref VpcCIDR # References the network-params.json file
            EnableDnsHostnames: true
            Tags: 
                - Key: Name
                  Value: !Ref EnvironmentName
  
    # Internet Gateway to allow internet for VPC
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
  
    # Attach Internet Gateway to VPC   
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
            

  # ========================
  # Public Subnets
  # ========================

    # Public Subnet 1
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet1CIDR
          MapPublicIpOnLaunch: true   # Attribute of a public subnet
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
          
    
    # Public Subnet 2 
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PublicSubnet2CIDR
          MapPublicIpOnLaunch: true   # Attribute of a public subnet
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  

  # ========================
  # Private Subnets
  # ========================
  
    # Private Subnet 1 
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PrivateSubnet1CIDR
          MapPublicIpOnLaunch: false
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    # Private Subnet 2
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PrivateSubnet2CIDR
          MapPublicIpOnLaunch: false
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Subnet (AZ2)


  # ========================
  # Nat Gateways
  # ========================
  
    # Nat Gateways to allow internet for private subnets
    NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties: 
          Domain: vpc
  
    NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc
  
    NatGateway1: 
      Type: AWS::EC2::NatGateway
      Properties: 
        AllocationId: !GetAtt NatGateway1EIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} NAT Gateway 1
  
    NatGateway2: 
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGateway2EIP.AllocationId
        SubnetId: !Ref PublicSubnet2    
        Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} NAT Gateway 2        
    
    
  # =========================
  # Public Routes
  # =========================
  
    # Public Route Table
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref VPC
        Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Route Table
  
    # Route to Internet Gateway 
    DefaultPublicRoute: 
      Type: AWS::EC2::Route
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
  
    # Associate Public Subnet 1 to the Route Table
    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1
    
    # Associate Public Subnet 2 to the Route Table
    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2
  
  
  # =========================
  # Private Routes
  # =========================
  
    # Private Route Table 1
    PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref VPC
        Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Route Table 1
    
    # Route to NAT Gateway 1
    DefaultPrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway1
    
    # Associate Private Subnet 1 to the Private Route table 1
    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRouteTable1
        SubnetId: !Ref PrivateSubnet1
  
    # Private Route Table 2
    PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId: !Ref VPC
        Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Route Table 2
  
    # Route to NAT Gateway 2
    DefaultPrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable2
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway2
     
    # Associate Private Subnet 2 to the Private Route table 2
    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateRouteTable2
        SubnetId: !Ref PrivateSubnet2
  
  
Outputs:
    VPC: 
      Description: A reference to the created VPC
      Value: !Ref VPC
      Export:
        Name: !Sub ${EnvironmentName}-VPCID          
  
    PublicSubnets:
      Description: A list of the public subnet IDs
      Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
      Export:
        Name: !Sub ${EnvironmentName}-Public-Subnet-IDs
    
    PublicSubnet1CIDR:
      Description: Public Subnet 1 CIDR
      Value: !Ref PublicSubnet1CIDR
      Export:
        Name: !Sub ${EnvironmentName}-Public-Subnet-1-CIDR
  
    PublicSubnet2CIDR:
      Description: Public Subnet 2 CIDR
      Value: !Ref PublicSubnet2CIDR
      Export:
        Name: !Sub ${EnvironmentName}-Public-Subnet-2-CIDR
    
    PublicSubnet1ID:
      Description: Public Subnet 1 ID
      Value: !Ref PublicSubnet1
      Export:
        Name: !Sub ${EnvironmentName}-Public-Subnet-1-ID
    
    PublicSubnet2ID:
      Description: Public Subnet 2 ID
      Value: !Ref PublicSubnet2
      Export:
        Name: !Sub ${EnvironmentName}-Public-Subnet-2-ID
  
    PrivateSubnets:
      Description: A list of the private subnet IDs
      Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
      Export:
        Name: !Sub ${EnvironmentName}-Private-Subnet-IDs
  